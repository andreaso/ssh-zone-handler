#!/usr/bin/env python3

import os
import subprocess
import sys
from typing import Final

from integration_cases import TestCase, cases


class RunTests:
    def __init__(self) -> None:
        basedir = os.path.abspath(os.path.join(os.path.dirname(sys.argv[0]), ".."))
        self.ssh_conf_path: Final[str] = os.path.join(
            basedir, "devel/.generated/ssh_conf"
        )

    def test(self, host: str, daemon: str, case: TestCase) -> None:
        full_command = [
            "ssh",
            "-F",
            self.ssh_conf_path,
            "-l",
            "alice",
            host,
            case.command,
        ]
        full_command += case.zones

        chosen_stdout: str = case.stdout.pick(daemon)
        chosen_stderr: str = case.stderr.pick(daemon)

        result = subprocess.run(full_command, capture_output=True, text=True)

        try:
            assert result.returncode == case.rc
        except AssertionError as error:
            print(f"Expected return code: {case.rc}")
            print(f"Resulted return code: {result.returncode}")
            raise error
        try:
            assert result.stderr == chosen_stderr
        except AssertionError as error:
            print(f"Expected standard error:  {repr(chosen_stderr)}")
            print(f"Resulted standard error:  {repr(result.stderr)}")
            raise error
        try:
            assert result.stdout == chosen_stdout
        except AssertionError as error:
            print(f"Expected standard output:  {repr(chosen_stdout)}")
            print(f"Resulted standard output:  {repr(result.stdout)}")
            raise error


def main() -> None:
    rt = RunTests()

    for host, daemon in [("szh-secondary", "BIND"), ("szh-tertiary", "Knot")]:
        print(f"* Testing {host} {daemon} host")
        case: TestCase
        for case in cases:
            print(f"** Test {case.name}")
            try:
                rt.test(host, daemon, case)
            except AssertionError:
                print("\nTest failed. Aborting.")
                sys.exit(1)
        print()


if __name__ == "__main__":
    main()
